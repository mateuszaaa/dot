#!/bin/bash

alias kkil='killall'
alias ls='ls --color=auto'
alias report='~/.matconf/bin/status.py'
alias c='xclip -selection primary'
alias glog='git log --oneline |head -30'
alias bb-restart='ssh buildbot cd /home/lapekc6/bm_ci/tools/;git pull -r;'
alias xx='byobu new'

function ut() {
    if [ -z $1 ]; then
        echo "no domain provided"
    else
        echo "./swim/$1/$1_ut --source_dir=../swim/$1/testing/data"
        ./swim/$1/$1_ut --source_dir=../swim/swim/$1/testing/data
    fi
}

function vut() {
    if [ -z $1 ]; then
        echo "no domain provided"
    else
        echo "vlagrind --gen-suppressions=all --error-exitcode=1 --track-origins=yes --leak-check=full --show-leak-kinds=all ./swim/$1/$1_ut --source_dir=../swim/$1/testing/data"
        valgrind --gen-suppressions=all --error-exitcode=1 --track-origins=yes --leak-check=full --show-leak-kinds=all ./swim/$1/$1_ut --source_dir=../swim/swim/$1/testing/data --gtest_shuffle
    fi
}

function redmi() {
    txt=`echo $1 | sed 's/ /%s/g'`
    adb shell input keyboard text $txt
}

function bb_restart() {
    ssh buildbot cd /home/lapekc6/bm_ci/tools/;git pull -r; buildbot restart /home/lapekc6/bm_ci/bm_buildbot/master/

}

function sshcopyenv() {
    if [ -z $1 ]; then
        echo "remote param needed"
        exit -1
    fi
    ssh $1 "rm -rf ~/config"
    scp -r ~/config $1:~/
    ssh $1 "rm -rf ~/.bashrc ~/.zshrc ~/.vimrc"
    ssh $1 "ln -s ~/config/zshrc ~/.zshrc"
    ssh $1 "ln -s ~/config/bashrc ~/.bashrc"
    ssh $1 "ln -s ~/config/vimrc ~/.vimrc"
}

function ffind() {
    find -iname "*$1*"
}

function bclean() {
    ssh $BMAKE_REMOTE_HOST rm -rf $BMAKE_REMOTE_REPO_DIR
}

function bsync() {
    ssh $BMAKE_REMOTE_HOST mkdir -p $BMAKE_REMOTE_REPO_DIR
    rsync -avt $BMAKE_LOCAL_REPO_DIR $BMAKE_REMOTE_HOST:$BMAKE_REMOTE_REPO_DIR
}

function bmake() {
    BMAKE_REMOTE_REPO_DIR+="/swim/"
    if [ -z BMAKE_PATH ]; then
        BMAKE_REMOTE_REPO_DIR+=$BMAKE_PATH
        echo "USING SUBPATH => $BMAKE_REMOTE_REPO_DIR"
    fi
    echo "ssh $BMAKE_REMOTE_HOST make -C $BMAKE_REMOTE_REPO_DIR $@"
    ssh $BMAKE_REMOTE_HOST make -C $BMAKE_REMOTE_REPO_DIR $@
}

function bm_review_answer(){
    commit_nr=`git log --oneline | head -1 | cut -d " " -f 1`
    git show $commit_nr
    echo "Fixed in $commit_nr" | c
}

function password(){
read -s PASS
for i in $@; do
    index=$(( $i-1  ))
    echo "clipboard ready: $i - ${PASS:$index:1}"
    echo ${PASS:$index:1} | xclip -selection clipboard
    read next
done
echo "exit..."
}

function cscope-indexing {
    find . -iname "*.c" -or -iname "*.h" -or -iname "*.hpp" -or -iname "*.cpp" > cscope.files
    cscope -b -q -k
}

function ctags-index-c {
 ctags -R  --languages=C,C++ .
}

function ctags-index-ttcn {
 ctags -R  --languages=TTCN .
}


function tbd {
    file=$1
    archive_type=$2
    unit=$3

    if [ -z $archive_type ];  then
        echo "type not set - using apps"
        archive_type="apps"
    fi

    if [ -z $unit ]; then
        echo "unit value not set - using FCT"
        unit="FCT"
    fi
    lower_unit=`echo $unit | tr '[A-Z]' '[a-z]'`
    upper_unit=`echo $unit | tr '[a-z]' '[A-Z]'`
    file_name=`basename $1`
    checksum=`adler $file`
    length=`ls -la $file | cut -d " " -f 5`
    name=`echo $file_name | cut -d "_" -f 1`
    post_split=`echo $file_name | cut -d "_" -f 2`
    version="_$post_split"
    if [ -z $version ]; then
        name=`echo $file_name | cut -d "." -f 1`
        post_split=`echo $file_name | cut -d "." -f 2`
        version=".$post_split"
    fi
    if [ -z $version ]; then
        echo "cannot parse version"
        return
    fi
    echo "<buildElement swFileKeyName=\"\" name=\"$name\" version=\"$version\" hwUnit=\"$upper_unit\" nrOfBlocks=\"1\" checksum=\"$checksum\" fileLength=\"$length\" targetPath=\"/rom/$archive_type/$lower_unit/\" path=\"/$unit/\" compressed=\"\" encrypted=\"\"/>"
}

function rotta {
    mkdir -p ~/rotta/
	umount ~/rotta/
	sudo mkdir -p ~/rotta/ && sudo mount -t cifs //nsn-intra.net/eefs/rotta ~/rotta/ -o username=matnowak,file_mode=0777,nosuid,uid=matnowak,gid=matnowak,sec=ntlm
}

function windows {
    mkdir -p ~/citrix/
	umount ~/citrix/
	sudo mkdir -p ~/citrix/ && sudo mount -t cifs //mueefsn51.emea.nsn-net.net ~/citrix/ -o username=matnowak,file_mode=0777,nosuid,uid=matnowak,gid=matnowak,sec=ntlm
}

function share {
	chmod -R g+rwx $1
	chown -R :users $1
}

function title {
    printf "\e]0;$@\7\n"

}

function vimreview {
    gvim -p `git diff --name-only HEAD` -c "tabdo Gdiff"
}

function vimcompare {
    if [ -z $1 ]; then
        echo "missing arg - branch name"
        return 1
    fi
    gvim -p `git diff --name-only $1` -c "tabdo Gdiff $1"
}

function vpn {
    sudo openconnect --user matnowak --no-proxy --certificate /home/cert/matnowak.ipa.nsn-net.net.crt --cafile /home/cert/ca_bundle.crt --sslkey /home/cert/matnowak.ipa.nsn-net.net.key nra-emea-fi-esp-vip.net.nokia.com
}

# alias cmake='cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON'
alias rcp='mount /build/rcp'

function addsubbtitlesMP4 {
    $(readlink -f $1)
    movie_path=$(echo $(readlink -f $1) | sed s/\.mp4$//g | sed s/\.MP4$//g)
    movie=$movie_path.mp4
    subs=$movie_path.srt
    output=${movie_path}_WITH_SUBS.mp4
    if [ ! -e $movie ]; then
        echo "$movie - no such file exists"
        exit 1
    fi
    if [ ! -e $subs ]; then
        echo "$subs - no such file exists"
        exit 1
    fi

    ffmpeg -i $movie -sub_charenc CP1250 -i $subs -vcodec copy -acodec copy -scodec mov_text -metadata:s:s:0 language=pl $output
}

function addsubbtitlesMKV {
    $(readlink -f $1)
    movie_path=$(echo $(readlink -f $1) | sed s/\.mp4$//g | sed s/\.MP4$//g)
    movie=$movie_path.mkv
    subs=$movie_path.srt
    output=${movie_path}_WITH_SUBS.mkv
    if [ ! -e $movie ]; then
        echo "$movie - no such file exists"
        return 1
    fi
    if [ ! -e $subs ]; then
        echo "$subs - no such file exists"
        return 1
    fi

    ffmpeg -i $movie -i $subs -vcodec copy -acodec copy -scodec srt $output
}

function hex(){
    python -c "print(hex($1))"
}

function bin(){
    python -c "print(bin($1))"
}

function copynokiapassword(){
    echo -e "dn!YIVJG9A0#" | xclip -selection primary
}
